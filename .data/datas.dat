ogICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgIGlkID0gcG9zdHMubWVzc2FnZXNbMF0uaWQKICAgICByID0gYy5nZXQodXJsLCBoZWFkZXJzPXVhLCB0aW1lb3V0PTIxLCBhbGxvd19yZWRpcmVjdHM9VHJ1ZSkKICAgICBzb3VwID0gQmVhdXRpZnVsU291cChyLmNvbnRlbnQsImh0bWwucGFyc2VyIikKICAgICBpZiBzb3VwLmZpbmQoImRpdiIsY2xhc3NfPSJnLXJlY2FwdGNoYSIpIGlzIE5vbmUgYW5kIHNvdXAuZmluZCgnZGl2JywgaWQ9ImhlYWRiYXIiKSBpcyBOb25lOgogICAgICAgIHNsZWVwKDQpCiAgICAgICAgcG9zdHMgPSBjbGllbnQoR2V0SGlzdG9yeVJlcXVlc3QocGVlcj1jaGFubmVsX2VudGl0eSxsaW1pdD0xLG9mZnNldF9kYXRlPU5vbmUsb2Zmc2V0X2lkPTAsbWF4X2lkPTAsbWluX2lkPTAsYWRkX29mZnNldD0wLGhhc2g9MCkpCiAgICAgICAgbWVzc2FnZSA9IHBvc3RzLm1lc3NhZ2VzWzBdLm1lc3NhZ2UKICAgICAgICBpZiBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIllvdSBtdXN0IHN0YXkiKSAhPSAtMSBvciBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIlBsZWFzZSBzdGF5IG9uIikgIT0gLTE6CiAgICAgICAgICAgc2VjID0gcmUuZmluZGFsbCggcicoW1xkLl0qXGQrKScsIG1lc3NhZ2UpCiAgICAgICAgICAgdHVuZ2d1KGludChzZWNbMF0pKQogICAgICAgICAgIHNsZWVwKDUpCiAgICAgICAgICAgcG9zdHMgPSBjbGllbnQoR2V0SGlzdG9yeVJlcXVlc3QocGVlcj1jaGFubmVsX2VudGl0eSxsaW1pdD0yLG9mZnNldF9kYXRlPU5vbmUsb2Zmc2V0X2lkPTAsbWF4X2lkPTAsbWluX2lkPTAsYWRkX29mZnNldD0wLGhhc2g9MCkpCiAgICAgICAgICAgbWVzc2FnZXJlcyA9IHBvc3RzLm1lc3NhZ2VzWzFdLm1lc3NhZ2UKICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcclwwMzNbMTszMG0jIFwwMzNbMTszMm0iK21lc3NhZ2VyZXMrIlxuXDAzM1swbSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICBwYXNzCgoKICAgICBlbGlmIHNvdXAuZmluZCgnZGl2JywgaWQ9ImhlYWRiYXIiKSBpcyBub3QgTm9uZToKICAgICAgICBzbGVlcCgzKQogICAgICAgIGZvciBkYXQgaW4gc291cC5maW5kX2FsbCgnZGl2JyxjbGFzc189ImNvbnRhaW5lci1mbHVpZCIpOgogICAgICAgICAgICBjb2RlID0gZGF0LmdldCgnZGF0YS1jb2RlJykKICAgICAgICAgICAgdGltZXIgPSBkYXQuZ2V0KCdkYXRhLXRpbWVyJykKICAgICAgICAgICAgdG9rZW4gPSBkYXQuZ2V0KCdkYXRhLXRva2VuJykKICAgICAgICAgICAgdHVuZ2d1KGludCh0aW1lcikpCiAgICAgICAgICAgIHNsZWVwKDMpCiAgICAgICAgICAgIHIgPSBjLnBvc3QoImh0dHBzOi8vZG9nZWNsaWNrLmNvbVxyZXdhcmQiLGRhdGE9eyJjb2RlIjpjb2RlLCJ0b2tlbiI6dG9rZW59LCBoZWFkZXJzPXVhLCB0aW1lb3V0PTIxLCBhbGxvd19yZWRpcmVjdHM9VHJ1ZSkKICAgICAgICAgICAganMgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHJcMDMzWzE7MzBtIyBcMDMzWzE7MzJtWW91IGVhcm5lZCAiK2pzWydyZXdhcmQnXSsiIEJUQyBmb3IgdmlzaXRpbmcgYSBzaXRlIVxuXDAzM1swbSIpCiAgICAgZWxzZToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIpCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiKQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbMTszMG0jIFwwMzNbMTszMW1DYXB0Y2hhIERldGVjdGVkIVwwMzNbMG0iKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHNsZWVwKDIpCiAgICAgICAgY2xpZW50KEdldEJvdENhbGxiYWNrQW5zd2VyUmVxdWVzdCgKICAgICAgICBjaGFubmVsX3VzZXJuYW1lLAogICAgICAgIGlkLAogICAgICAgIGRhdGE9cG9zdHMubWVzc2FnZXNbMF0ucmVwbHlfbWFya3VwLnJvd3NbMV0uYnV0dG9uc1sxXS5kYXRhCiAgICAgICAgKSkKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcclwwMzNbMTszMG0jIFwwMzNbMTszMW1Ta2lwIENhcHRjaGEuLi4hICAgICAgIFxuXDAzM1swbSIpCiAgICAgICAgc2xlZXAoMSkKICAgIGV4Y2VwdDoKICAgICAgICB0cnk6CiAgICAgICAgIHNsZWVwKDIpCiAgICAgICAgIHBvc3RzID0gY2xpZW50KEdldEhpc3RvcnlSZXF1ZXN0KHBlZXI9Y2hhbm5lbF9lbnRpdHksbGltaXQ9MSxvZmZzZXRfZGF0ZT1Ob25lLG9mZnNldF9pZD0wLG1heF9pZD0wLG1pbl9pZD0wLGFkZF9vZmZzZXQ9MCxoYXNoPTApKQogICAgICAgICBtZXNzYWdlID0gcG9zdHMubWVzc2FnZXNbMF0ubWVzc2FnZQogICAgICAgICBpZiBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIllvdSBtdXN0IHN0YXkiKSAhPSAtMSBvciBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIlBsZWFzZSBzdGF5IG9uIikgIT0gLTE6CiAgICAgICAgICAgIHNlYyA9IHJlLmZpbmRhbGwoIHInKFtcZC5dKlxkKyknLCBtZXNzYWdlKQogICAgICAgICAgICB0dW5nZ3UoaW50KHNlY1swXSkpCiAgICAgICAgICAgIHNsZWVwKDIpCiAgICAgICAgICAgIHBvc3RzID0gY2xpZW50KEdldEhpc3RvcnlSZXF1ZXN0KHBlZXI9Y2hhbm5lbF9lbnRpdHksbGltaXQ9MixvZmZzZXRfZGF0ZT1Ob25lLG9mZnNldF9pZD0wLG1heF9pZD0wLG1pbl9pZD0wLGFkZF9vZmZzZXQ9MCxoYXNoPTApKQogICAgICAgICAgICBtZXNzYWdlcmVzID0gcG9zdHMubWVzc2FnZXNbMV0ubWVzc2FnZQogICAgICAgICAgICBzbGVlcCgyKQogICAgICAgICAgICBpZiBtZXNzYWdlcmVzLmZpbmQoIllvdSBlYXJuZWQiKSAhPSAtMToKICAgICAgICAgICAgCXN5cy5zdGRvdXQud3JpdGUoIlxyXDAzM1sxOzMwbSMgXDAzM1sxOzMybSIrbWVzc2FnZXJlcysiXG5cMDMzWzBtIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgCXBvc3RzID0gY2xpZW50KEdldEhpc3RvcnlSZXF1ZXN0KHBlZXI9Y2hhbm5lbF9lbnRpdHksbGltaXQ9MixvZmZzZXRfZGF0ZT1Ob25lLG9mZnNldF9pZD0wLG1heF9pZD0wLG1pbl9pZD0wLGFkZF9vZmZzZXQ9MSxoYXNoPTApKQogICAgICAgICAgICAJbWVzc2FnZXJlcyA9IHBvc3RzLm1lc3NhZ2VzWzFdLm1lc3NhZ2UKICAgICAgICAgICAgCXNsZWVwKDIpCiAgICAgICAgICAgIAlpZiBtZXNzYWdlcmVzLmZpbmQoIllvdSBlYXJuZWQiKSAhPSAtMToKICAgICAgICAgICAgCQlzeXMuc3Rkb3V0LndyaXRlKCJcclwwMzNbMTszMG0jIFwwMzNbMTszMm0iK21lc3NhZ2VyZXMrIlxuXDAzM1swbSIpCiAgICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBleGNlcHQ6CiAgICAgICAgCXByaW50KCJcMDMzWzkxbVNjcmlwdCBTdG9wZWQhISIpCiAgICAgICAgCXByaW50KCJcMDMzWzBtIikKCiBjbGllbnQucnVuX3VudGlsX2Rpc2Nvbm5lY3RlZCgpCmZpbmFsbHk6CiAgIGNsaWVudC5kaXNjb25uZWN0KCkKCnByaW50KCJcMDMzWzBtIik=
