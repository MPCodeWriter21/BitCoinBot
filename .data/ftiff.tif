dHJ5OgogaW1wb3J0IHRlbGV0aG9uCiBmcm9tIHRlbGV0aG9uIGltcG9ydCBUZWxlZ3JhbUNsaWVudCwgc3luYywgZXZlbnRzCiBmcm9tIHRlbGV0aG9uLnRsLmZ1bmN0aW9ucy5tZXNzYWdlcyBpbXBvcnQgR2V0SGlzdG9yeVJlcXVlc3QsIEdldEJvdENhbGxiYWNrQW5zd2VyUmVxdWVzdAogZnJvbSB0ZWxldGhvbi5lcnJvcnMgaW1wb3J0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yCiBmcm9tIHRlbGV0aG9uLmVycm9ycyBpbXBvcnQgRmxvb2RXYWl0RXJyb3IKIGZyb20gdGltZSBpbXBvcnQgc2xlZXAKIGltcG9ydCBqc29uLHJlLHN5cyxvcwogZnJvbSB0ZWxldGhvbi50bC5mdW5jdGlvbnMuY2hhbm5lbHMgaW1wb3J0IERlbGV0ZU1lc3NhZ2VzUmVxdWVzdApleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiBwcmludCgiXDAzM1s5MW0iKQogcHJpbnQoZSkKIHByaW50KCJcMDMzWzBtIikKdHJ5OgogICBpbXBvcnQgcmVxdWVzdHMKICAgZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKZXhjZXB0OgogICBwcmludCAoIlwwMzNbMTszMG0jIFwwMzNbMTszMW1IbW1tIEl0IGxvb2tzIGxpa2UgdGhlIFwiUmVxdWVzdHMgQW5kIEJzNCBNb2R1bGVcIiBIYXMgTm90IEJlZW4gSW5zdGFsbGVkXG5cMDMzWzE7MzBtIyBcMDMzWzE7MzFtVG8gaW5zdGFsbCBQbGVhc2UgVHlwZSBcInBpcCBpbnN0YWxsIHJlcXVlc3RzIGFuZCBwaXAgaW5zdGFsbCBiczRcIlwwMzNbMG0iKQogICBzeXMuZXhpdCgpCgpjID0gcmVxdWVzdHMuU2Vzc2lvbigpCgoKYmFubmVyID0gIiIiClwwMzNbMDs0NG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgYCAgICAgICAgICAgICAgICAgICAgICAgIGBgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgIGA6b3Nvb28vLSsgICAgICAgICAgICAgICAgIGArZG0gICAgICAgICAgIC1vc3MrLiA6b3NzKy4gICA6b3MvICAgICAgICAgL04rICAgICAgICAgICAgICAgICAgICAgICAgICAtc2hocy0gICAgICBgL3kuICAKICA6ZHkuICAgIDpteSAgICAgICAgICAgICAgICAgICBtbSAgICAgICAgICAgIGBtTjogICAtTk4uICAgICBzbyAgICAgICAgICBgLy4gICAgOiAgICAgICAgICAgICAgICAgICAgOmQrL29tTisgICAgLi9tTi4gIAogOk5oICAgICAgIC5oICAgICAgICAgICAgICAgICAgIGRtICAgICAgICAgICAgICtOcyAgICBzTisgICAgYGRgICAgICAgICAgICAgICAgIC1kICAgICAgICAgICAgICAgICAgICBzYCAgIC5OTiAgICAgIHNOLiAgCmBtTi0gICAgICAgIC8gICAgLi8rLy4gICAgICAtLystZG0gICAgYDorLy4gICAgYG1OLiAgIDpObWAgICAvbyAgICAtLyA6K2AgYDotICAvbW0tLSAgIGAvKy8uICAgYDotYC8vIGAgICAgIGhOICAgICAgc04uICAKL05tICAgICAgICAgICAgYHlzLmArTm8gICBgaG9gLnNObSAgIC9zLi5vTm8gICAgb05zICAgeWROKyAgIGRgICAub05ob3lOKzpoTisgYDptbTo6ICArby4uc04rIDpoTnNzZE4uICAgICAgbW8gICAgICBzTi4gIApvTmQgICAgICAgICAgICB5ZCAgICBvTm8gIGR5ICAgIG1tICA6bWBgYGBtTi0gICBgbU5gIC1oLk5tICAvbyAgICAgTm1gIGAgIC9OKyAgIGRkICAgL2RgYGBgbU4uIC9OcyAgYCAgICAgICtoICAgICAgIHNOLiAgCm9ObSAgICAgICAgICAgLk55ICAgIGBObSAvTi8gICAgZG0gIHlkLy8vLy8vLiAgICBvTm8geS0geU4vIGRgICAgICBOaCAgICAgOk4rICAgZGQgICB5ZC8vLy8vLy4gOk4vICAgICAgICA6eWAgICAgICAgc04uICAKLU5OLiAgICAgICAgICAtTmggICAgIE5tIG9OLyAgICBkbSAgeW0gICAgICAgICAgIGBtTi1oICAtTmQ6cyAgICAgIE5oICAgICA6TisgICBkZCAgIGhkICAgICAgICA6Ti8gICAgICAgL28gICAgICAgICBzTi4gIAogc055ICAgICAgICAvYGBtTmAgICBgTnkgL055ICAgIGRtICBvTm8gICAgOi0gICAgIG9ObTogICB5Tm0uICAgICAgTmggICAgIDpOKyAgIGRkICAgc04rICAgIDouIDpOLyAgICAgYG86ICAgIC4gICAgIHNOLiAgCiAgc055LSAgICAuKy0gIC9OeSAgICtkLiBgZE5vYCAtbU4uYGBkTmgvL29zICAgICAgYE5oICAgIC1OeSAgICAgICBOZCAgICAgOk4rICAgZE4uLS4ubU55Ly9vcyAgL04rICAgIC1kcysvKytzbyAgICAgc04uICAKICAgLXNoaHNvby9gICAgIC15eStvb2AgICBgb2RkeS95eS9gIGBvZG1oK2AgICAgICAgbzogICAgIHktICAgICAuL2h5L2AgIC1vaHMtICA6aGgvICAuc2RtaCsgIC1vaHk6ICAueWhoaGhoaGhgICAgYDp5aG86IAogICAgIGBgYGAgICAgICAgICBgYGAgICAgICAgYGBgIGAgICAgICBgYGAgICAgICAgICAgICAgICAgYCAgICAgICAgICAgICAgICAgICAgICBgYCAgICAgYGBgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIApcMDMzWzA7MzRtXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClwwMzNbMTszMm1Db2RlZCBieSAgXDAzM1sxOzMxbSA6XDAzM1sxOzBtIENvZGVXcml0ZXIyMQpcMDMzWzE7MzJtVGVsZWdyYW0gQ2hhbm5lbCAgXDAzM1sxOzMxbSAgOiBcMDMzWzE7MG0gQE1QQ29kZVdyaXRlclxuXDAzM1swbSIiIgoKaWYgbm90IG9zLnBhdGguZXhpc3RzKCJzZXNzaW9uIik6CiAgICBvcy5tYWtlZGlycygic2Vzc2lvbiIpCgpmb3Igc3cgaW4gc3lzLmFyZ3Y6CiBpZiBzdyA9PSAiLWgiIG9yIHN3ID09ICItLWhlbHAiOgogCXByaW50KCJcblxuXG5cMDMzWzE7MzJtVXNhZ2UgOiBweXRob24gcnVuLnB5ICs5OHh4eHh4eHh4eHhcblxuXDAzM1swbSIpCiAJc3lzLmV4aXQoMSkKIApwcmludCAoYmFubmVyKQoKaWYgbGVuKHN5cy5hcmd2KTwyOgogICBwcmludCAoIlxuXG5cblwwMzNbMTszMm1Vc2FnZSA6IHB5dGhvbiBydW4ucHkgKzk4eHh4eHh4eHh4eCIpCiAgIHByaW50KCJcMDMzWzBtIikKICAgc3lzLmV4aXQoMSkKCgpkZWYgcGFzc3dvcmQoKToKICBjID0gcmVxdWVzdHMuU2Vzc2lvbigpCgoKZGVmIHR1bmdndSh4KToKICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICAgIHN5cy5zdGRvdXQud3JpdGUoIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpCiAgICBmb3IgcmVtYWluaW5nIGluIHJhbmdlKHgsIDAsIC0xKToKICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbMTszMG0jXDAzM1sxOzBtezoyZH0gXDAzM1sxOzMybXNlY29uZHMgcmVtYWluaW5nXDAzM1swbSIuZm9ybWF0KHJlbWFpbmluZykpCiAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgIHNsZWVwKDEpCgoKdWE9eyJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA1LjE7IEExNjAzIEJ1aWxkL0xNWTQ3STsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS80My4wLjIzNTcuMTIxIE1vYmlsZSBTYWZhcmkvNTM3LjM2In0KCgoKYXBpX2lkID0gNzE3NDI1CmFwaV9oYXNoID0gJzMyMjUyNmQyYzMzNTBiMWQzNTMwZGUzMjdjZjA4YzA3JwpwaG9uZV9udW1iZXIgPSBzeXMuYXJndlsxXQoKY2xpZW50ID0gVGVsZWdyYW1DbGllbnQoInNlc3Npb24vIitwaG9uZV9udW1iZXIsIGFwaV9pZCwgYXBpX2hhc2gpCnRyeToKIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbOTNtQ29ubmVjdGluZyIpCiBzbGVlcCgwLjUpCiBzeXMuc3Rkb3V0LmZsdXNoKCkKIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbOTNtLiIpCiBzbGVlcCgwLjUpCiBzeXMuc3Rkb3V0LmZsdXNoKCkKIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbOTNtLiIpCiBzbGVlcCgwLjUpCiBzeXMuc3Rkb3V0LmZsdXNoKCkKIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbOTNtLiIpCiBzbGVlcCgwLjUpCiBzeXMuc3Rkb3V0LmZsdXNoKCkKIGNsaWVudC5jb25uZWN0KCkKIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKIHByaW50KCJcMDMzWzkybSAgQ29ubmVjdGVkISFcMDMzWzBtXG4iKQogc2xlZXAoMikKZXhjZXB0Ogogc3lzLnN0ZG91dC53cml0ZSgiXHIiKQogcHJpbnQoIlwwMzNbOTFtQ291bGRuJ3QgY29ubmVjdCB0byBhY2NvdW50ISFcblwwMzNbMG0iKQogcHJpbnQoIlxuXDAzM1s5NW1DaGVjayB5b3VyIHBob25lIG51bWJlcihpdCBtdXN0IGJlIGxpa2UgJys5ODk5OTk5OTk5OTknIG9yICcrMTU1NTU1NTU1NTUnIG9yIGV0Yy4pXG5cbkNoZWNrIHlvdXIgaW50ZXJuZXQgY29ubmVjdGlvbiBhbmQgaWYgeW91IGFyZSB1c2luZyBWUE4sIFByb3h5IG9yIEROUyB0cnkgdG8gZml4IGl0LlwwMzNbMG0iKQogcHJpbnQoIlwwMzNbMG0iKQogc3lzLmV4aXQoMSkKCmlmIG5vdCBjbGllbnQuaXNfdXNlcl9hdXRob3JpemVkKCk6CiAgdHJ5OgogICAgY2xpZW50LnNlbmRfY29kZV9yZXF1ZXN0KHBob25lX251bWJlcikKICAgIG1lID0gY2xpZW50LnNpZ25faW4ocGhvbmVfbnVtYmVyLCBpbnB1dCgnXG5cblxuXDAzM1sxOzBtRW50ZXIgWW91ciBDb2RlIDogJykpCiAgZXhjZXB0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yOgogICBwYXNzdyA9IGlucHV0KCJcMDMzWzE7MG1Zb3VyIDJzdGVwIFBhc3N3b3JkIDogIikKICAgbWUgPSBjbGllbnQuc3RhcnQocGhvbmVfbnVtYmVyLHBhc3N3KQpteXNlbGYgPSBjbGllbnQuZ2V0X21lKCkKb3Muc3lzdGVtKCJjbGVhciIpCnByaW50IChiYW5uZXIpCnByaW50ICgiXDAzM1sxOzMybVdlbGNvbWUgVG8gQml0RWFybm5lclxuXDAzM1sxOzMybVRoaXMgQm90IElzIFVzZWQgRm9yIEJUQyBDbGljayBCb3RcMDMzWzBtIikKCgpwYXNzd29yZCgpCnByaW50ICgiXG5cblwwMzNbMTszN21TdGFydGluZyBFYXJuLi4uLi4uIVwwMzNbOTBtXG4oWW91IENhbiBTdG9wIFNjcmlwdCBCeSBDVFJMICsgQykiKQp0cnk6CiBjaGFubmVsX2VudGl0eT1jbGllbnQuZ2V0X2VudGl0eSgiQEJpdGNvaW5DbGlja19ib3QiKQogY2hhbm5lbF91c2VybmFtZT0iQEJpdGNvaW5DbGlja19ib3QiCiBmb3IgaSBpbiByYW5nZSg1MDAwMDAwKToKICBzeXMuc3Rkb3V0LndyaXRlKCJcciIpCiAgc3lzLnN0ZG91dC53cml0ZSgiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKQogIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICBpZiBpJTEwID09IDA6CiAgIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbMzRtXG5cblwwMzNbMG0iKQogICBjbGllbnQuc2VuZF9tZXNzYWdlKGVudGl0eT1jaGFubmVsX2VudGl0eSxtZXNzYWdlPSBiIlx4ZjBceDlmXHg5Mlx4YjAiLmRlY29kZSgiVVRGLTgiKSsiIEJhbGFuY2UiKQogICBzbGVlcCgzKQogICBwb3N0cyA9IGNsaWVudChHZXRIaXN0b3J5UmVxdWVzdChwZWVyPWNoYW5uZWxfZW50aXR5LGxpbWl0PTEsb2Zmc2V0X2RhdGU9Tm9uZSxvZmZzZXRfaWQ9MCxtYXhfaWQ9MCxtaW5faWQ9MCxhZGRfb2Zmc2V0PTAsaGFzaD0wKSkKICAgbWVzc2FnZSA9IHBvc3RzLm1lc3NhZ2VzWzBdLm1lc3NhZ2UKICAgcHJpbnQgKCJcMDMzWzk0bSIgKyBtZXNzYWdlKQogICBzeXMuc3Rkb3V0LndyaXRlKCJcblxuIikKICBzeXMuc3Rkb3V0LndyaXRlKCJcMDMzWzE7MzBtIyBcMDMzWzE7MzNtVHJ5aW5nIHRvIG9wZW4gVVJMXDAzM1swbVxyIikKICBzeXMuc3Rkb3V0LmZsdXNoKCkKICBjbGllbnQuc2VuZF9tZXNzYWdlKGVudGl0eT1jaGFubmVsX2VudGl0eSxtZXNzYWdlPSBiIlx4ZjBceDlmXHg5Nlx4YTUiLmRlY29kZSgiVVRGLTgiKSsiIFZpc2l0IHNpdGVzIikKICBzbGVlcCgzKQogIHBvc3RzID0gY2xpZW50KEdldEhpc3RvcnlSZXF1ZXN0KHBlZXI9Y2hhbm5lbF9lbnRpdHksbGltaXQ9MSxvZmZzZXRfZGF0ZT1Ob25lLG9mZnNldF9pZD0wLG1heF9pZD0wLG1pbl9pZD0wLGFkZF9vZmZzZXQ9MCxoYXNoPTApKQogIGlmIHBvc3RzLm1lc3NhZ2VzWzBdLm1lc3NhZ2UuZmluZCgiU29ycnksIHRoZXJlIGFyZSBubyBuZXcgYWRzIGF2YWlsYWJsZSIpICE9IC0xOgogICAgIHByaW50ICgiXDAzM1sxOzMwbSMgXDAzM1sxOzMxbUFkcyBBcmUgT3V0Li4uLiEhIVxuXDAzM1swbSIpCiAgICAgY2xpZW50LnNlbmRfbWVzc2FnZShlbnRpdHk9Y2hhbm5lbF9lbnRpdHksbWVzc2FnZT0gYiJceGYwXHg5Zlx4OTJceGIwIi5kZWNvZGUoIlVURi04IikrIiBCYWxhbmNlIikKICAgICBzbGVlcCgzKQogICAgIHBvc3RzID0gY2xpZW50KEdldEhpc3RvcnlSZXF1ZXN0KHBlZXI9Y2hhbm5lbF9lbnRpdHksbGltaXQ9MSxvZmZzZXRfZGF0ZT1Ob25lLG9mZnNldF9pZD0wLG1heF9pZD0wLG1pbl9pZD0wLGFkZF9vZmZzZXQ9MCxoYXNoPTApKQogICAgIG1lc3NhZ2UgPSBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlCiAgICAgcHJpbnQgKCJcMDMzWzE7MzFtIiArIG1lc3NhZ2UgKyAiXDAzM1swbSIpCiAgICAgc3lzLnN0ZG91dC53cml0ZSgiXDAzM1sxOzMwbSMgXDAzM1szM21UcnlpbmcgYWdhaW4gXDAzM1szMm0yMTBzXDAzM1swbSIpCiAgICAgY291bnRlciA9IDIxMAogICAgIHdoaWxlIG5vdCBjb3VudGVyID09IDA6CiAgICAgCWlmIGNvdW50ZXIgPj0gMTAwOgogICAgIAkJc3lzLnN0ZG91dC53cml0ZSgiXHJcMDMzWzE7MzBtIyBcMDMzWzMzbVRyeWluZyBhZ2FpbiBcMDMzWzMybSIrc3RyKGNvdW50ZXIpKyJzXDAzM1swbSIpCiAgICAgCWVsaWYgY291bnRlciA+PSAxMDoKICAgICAJCXN5cy5zdGRvdXQud3JpdGUoIlxyXDAzM1sxOzMwbSMgXDAzM1szM21UcnlpbmcgYWdhaW4gIFwwMzNbMzJtIitzdHIoY291bnRlcikrInNcMDMzWzBtIikKICAgICAJZWxzZToKICAgICAJCXN5cy5zdGRvdXQud3JpdGUoIlxyXDAzM1sxOzMwbSMgXDAzM1szM21UcnlpbmcgYWdhaW4gICBcMDMzWzMybSIrc3RyKGNvdW50ZXIpKyJzXDAzM1swbSIpCiAgICAgCWNvdW50ZXItPTEKICAgICAJc2xlZXAoMSkKICAgICBwcmludCgiXDAzM1swbVxyLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIikKICBlbHNlOgogICAgdHJ5OgogICAgIHVybCA9IHBvc3RzLm1lc3NhZ2VzWzBdLnJlcGx5X21hcmt1cC5yb3dzWzBdLmJ1dHRvbnNbMF0udXJsCiAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiKQogICAgIHN5cy5zdGRvdXQud3JpdGUoIlwwMzNbMTszMG0jIFwwMzNbMTszM21WaXNpdGluZyBcMDMzWzE7OTNtIit1cmwrIlwwMzNbMG0iKQ
